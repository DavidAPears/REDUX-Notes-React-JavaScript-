**** MOTIVATION BEHIND REDUX ****

[Dan Abramov is the creator of Redux]

* Single page java apps need to handle more state that before
* For more complicated Apps (FLUX may be a better option for simpler ones, REACT for even simpler apps)
* Models can update models, then they update views - hard to reproduce bugs or add new features
* Front End Devs need to handle server-side rendering, data fetches, perform route transitions etc etc
* React currently mixes two concepts. Mutation & asynchronicity (mentos & coke)
* React tries to solve this by removing (direct) DOM manipulations & removing asynchronicity
* REDUX attempts to make mutations predictable.




**** CORE CONCEPTS ****

Imagine an apps state as a plain object - it may look like this (This is a simple ‘todo’ list):

Example:

{
  todos: [{
    text: 'Eat food',
    completed: true
  }, {
    text: 'Exercise',
    completed: false
  }],
  visibilityFilter: 'SHOW_COMPLETED'
}

-> This OBJECT is like a MODEL, except there are no setters! I.e the State CAN NOT be set arbitrarily
-> to CHANGE the state, we need to dispatch and ACTION
-> this ACTION is a plan javascript OBJECT that described what happened - EG:

{ type: 'ADD_TODO', text: 'Go to swimming pool' }
{ type: 'TOGGLE_TODO', index: 1 }
{ type: 'SET_VISIBILITY_FILTER', filter: 'SHOW_ALL' }

-> NB every change is an action (an object), so we have a clear understanding of the changes.
-> Think of actions like breadcrumbs, showing what has been changed.
-> to tie STATE & ACTIONS together a FUNCTION called a REDUCER is required/written
-> This function takes in all the ACTION arguments and returns the state of the app
-> These are broken down to manage state of small bits of the app


Example:

function visibilityFilter(state = 'SHOW_ALL', action) {
  if (action.type === 'SET_VISIBILITY_FILTER') {
    return action.filter
  } else {
    return state
  }
}
​
function todos(state = [], action) {
  switch (action.type) {
    case 'ADD_TODO':
      return state.concat([{ text: action.text, completed: false }])
    case 'TOGGLE_TODO':
      return state.map(
        (todo, index) =>
          action.index === index
            ? { text: todo.text, completed: !todo.completed }
            : todo
      )
    default:
      return state
  }
}

-> then another REDUCER is written to manage the entire apps state:


function todoApp(state = {}, action) {
  return {
    todos: todos(state.todos, action),
    visibilityFilter: visibilityFilter(state.visibilityFilter, action)
  }
}

!!! The core concept is that you describe how the state of the app is over time in response to ACTION objects !!!





**** THE THREE PRINCIPLES OF REDUX ****


1) SINGLE SOURCE OF TRUTH

The state of the WHOLE app is stored within an object tree in a SINGLE store.

This makes it easier to:

- Create universal apps
- Easier to debug or inspect
- To persist and apps state in development
- Difficult functionality (undio/redo) can become simplified

Example:

console.log(store.getState())

/* Prints
{
  visibilityFilter: 'SHOW_ALL',
  todos: [
    {
      text: 'Consider using Redux',
      completed: true,
    },
    {
      text: 'Keep all state in a single tree',
      completed: false
    }
  ]
}
*/


2) STATE IS READ ONLY

State can only be changed by emitting and *action*, (i.e an object describing what happened)

This ensures:

- Neither views not callbacks write directly to the state - they express an INTENT to transform the state.
- All changes are centralised and happen 1. Y 1 in strict order
- Actions can be logged, serialised and replayed for debugging/testing purposes.

Example:

store.dispatch({
  type: 'COMPLETE_TODO',
  index: 1
})
​
store.dispatch({
  type: 'SET_VISIBILITY_FILTER',
  filter: 'SHOW_COMPLETED'
})



3) CHANGES ARE MADE WITH PURE FUNCTIONS

To specify how the (single) state tree is transformed - one writes PURE REDUCERS

Reducers are(pure) functions that take the previous state & action and return the next state.

These functions return NEW STATE OBJECTS instead of mutating previous states.

- Start with single (Pure) Reducer
- As app grows split into smaller reducers that manage specific parts of the state tree
- As (pure) Reducers are functions the order they are called in can be controlled or pass additional data

Example:

function visibilityFilter(state = 'SHOW_ALL', action) {
  switch (action.type) {
    case 'SET_VISIBILITY_FILTER':
      return action.filter
    default:
      return state
  }
}
​
function todos(state = [], action) {
  switch (action.type) {
    case 'ADD_TODO':
      return [
        ...state,
        {
          text: action.text,
          completed: false
        }
      ]
    case 'COMPLETE_TODO':
      return state.map((todo, index) => {
        if (index === action.index) {
          return Object.assign({}, todo, {
            completed: true
          })
        }
        return todo
      })
    default:
      return state
  }
}
​
import { combineReducers, createStore } from 'redux'
const reducer = combineReducers({ visibilityFilter, todos })
const store = createStore(reducer)asynchronicity


**** LEARNING RESOURCES ****

Videos from Dan Abramov, REDUX creator
- https://egghead.io/courses/getting-started-with-redux

YouTube on REDUX basics (very good!)
- https://www.youtube.com/watch?v=1w-oQ-i1XB8

High level info (in cartoon form)
- https://code-cartoons.com/a-cartoon-intro-to-redux-3afb775501a6
